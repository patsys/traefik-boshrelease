<%

    # --------------------------------------------------- #
    # The following code is pulled out htauth's 'sha1.rb' #
    # --------------------------------------------------- #
    #
    # See: <https://github.com/copiousfreetime/htauth/blob/master/lib/htauth/sha1.rb>

    require 'digest/sha1'
    require 'base64'

    # Internal: an implementation of the SHA based encoding algorithm
    # as used in the apache htpasswd -s option
    def prefix_sha1
      "{SHA}"
    end

    def encode_sha1(password)
      "#{prefix_sha1}#{Base64.encode64(::Digest::SHA1.digest(password)).strip}"
    end


    # ----------------------------------------------------------- #
    # The following code is pulled out htauth's 'digest_entry.rb' #
    # ----------------------------------------------------------- #


    # Internal: calculate the new digest of the given password
    def calc_digest(user, realm, password)
      ::Digest::MD5.hexdigest("#{user}:#{realm}:#{password}")
    end

-%>
################################################################
# Global configuration
################################################################

# DEPRECATED - for general usage instruction see [lifeCycle.graceTimeOut].
#
# If both the deprecated option and the new one are given, the deprecated one
# takes precedence.
# A value of zero is equivalent to omitting the parameter, causing
# [lifeCycle.graceTimeOut] to be effective. Pass zero to the new option in
# order to disable the grace period.
#
# Optional
# Default: "0s"
#
# graceTimeOut = "10s"

# Enable debug mode.
# This will install HTTP handlers to expose Go expvars under /debug/vars and
# pprof profiling data under /debug/pprof/.
# The log level will be set to DEBUG unless `logLevel` is specified.
#
# Optional
# Default: false
#
debug = <%= p('traefik.debug') %>

# Periodically check if a new version has been released.
#
# Optional
# Default: true
#
# checkNewVersion = false

# Tells traefik whether it should keep the trailing slashes in the paths (e.g. /paths/) or redirect to the no trailing slash paths instead (/paths).
#
# Optional
# Default: false
#
# keepTrailingSlash = false

# Providers throttle duration.
#
# Optional
# Default: "2s"
#
# providersThrottleDuration = "2s"

# Controls the maximum idle (keep-alive) connections to keep per-host.
#
# Optional
# Default: 200
#
# maxIdleConnsPerHost = 200

# If set to true invalid SSL certificates are accepted for backends.
# This disables detection of man-in-the-middle attacks so should only be used on secure backend networks.
#
# Optional
# Default: false
#
InsecureSkipVerify = <%= p('traefik.accept_invalid_backend_certificates') %>

# Register Certificates in the rootCA.
#
# Optional
# Default: []
#
# rootCAs = [ "/mycert.cert" ]

# Entrypoints to be used by frontends that do not specify any entrypoint.
# Each frontend can specify its own entrypoints.
#
# Optional
# Default: ["http"]
#
# defaultEntryPoints = ["http", "https"]

# Allow the use of 0 as server weight.
# - false: a weight 0 means internally a weight of 1.
# - true: a weight 0 means internally a weight of 0 (a server with a weight of 0 is removed from the available servers).
#
# Optional
# Default: false
#
# AllowMinWeightZero = true


# Enable retry sending request if network error
[retry]

# Number of attempts
#
# Optional
# Default: (number servers in backend) -1
#
# attempts = 3


# Enable custom health check options.
[healthcheck]

# Set the default health check interval.
#
# Optional
# Default: "30s"
#
# interval = "30s"


# Control the behavior of Traefik during the shutdown phase.
[lifeCycle]

# Duration to keep accepting requests prior to initiating the graceful
# termination period (as defined by the `graceTimeOut` option). This
# option is meant to give downstream load-balancers sufficient time to
# take Traefik out of rotation.
# Can be provided in a format supported by [time.ParseDuration](https://golang.org/pkg/time/#ParseDuration) or as raw values (digits).
# If no units are provided, the value is parsed assuming seconds.
# The zero duration disables the request accepting grace period, i.e.,
# Traefik will immediately proceed to the grace period.
#
# Optional
# Default: 0
#
# requestAcceptGraceTimeout = "10s"

# Duration to give active requests a chance to finish before Traefik stops.
# Can be provided in a format supported by [time.ParseDuration](https://golang.org/pkg/time/#ParseDuration) or as raw values (digits).
# If no units are provided, the value is parsed assuming seconds.
# Note: in this time frame no new requests are accepted.
#
# Optional
# Default: "10s"
#
# graceTimeOut = "10s"


[respondingTimeouts]

# readTimeout is the maximum duration for reading the entire request, including the body.
#
# Optional
# Default: "0s"
#
# readTimeout = "5s"

# writeTimeout is the maximum duration before timing out writes of the response.
#
# Optional
# Default: "0s"
#
# writeTimeout = "5s"

# idleTimeout is the maximum duration an idle (keep-alive) connection will remain idle before closing itself.
#
# Optional
# Default: "180s"
#
# idleTimeout = "360s"


[forwardingTimeouts]

# dialTimeout is the amount of time to wait until a connection to a backend server can be established.
#
# Optional
# Default: "30s"
#
# dialTimeout = "30s"

# responseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
#
# Optional
# Default: "0s"
#
# responseHeaderTimeout = "0s"



# idleTimeout
#
# DEPRECATED - see [respondingTimeouts] section.
#
# Optional
# Default: "180s"
#
# idleTimeout = "360s"


[hostResolver]

# cnameFlattening is a trigger to flatten request host, assuming it is a CNAME record
#
# Optional
# Default : false
#
# cnameFlattening = true

# resolvConf is dns resolving configuration file, the default is /etc/resolv.conf
#
# Optional
# Default : "/etc/resolv.conf"
#
# resolvConf = "/etc/resolv.conf"

# resolvDepth is the maximum CNAME recursive lookup
#
# Optional
# Default : 5
#
# resolvDepth = 5




################################################################
# Entrypoints configuration
################################################################

# Entrypoints definition
#
# Optional

[entryPoints]
<% if p('traefik.http.enabled') -%>
  [entryPoints.http]
  address = ":80"
<%   if p('traefik.http.redirect_to_https') -%>
    [entryPoints.http.redirect]
    entryPoint = "https"
<%   end -%>
<% end -%>
<% if p('traefik.tls.enabled') -%>
  [entryPoints.https]
  address = ":443"
    [entryPoints.https.tls]
    minVersion = "<%= p('traefik.tls.min_version') %>"
<%   if_p('traefik.tls.cert') do |cert| -%>
      [[entryPoints.https.tls.certificates]]
      CertFile = "/var/vcap/jobs/traefik/tls/traefik-default.crt"
      KeyFile = "/var/vcap/jobs/traefik/tls/traefik-default.key"
<%   end -%>
<% end -%>

<% if p('traefik.api.enabled') -%>
  [entryPoints.traefik-api]
  address = ":<%= p('traefik.api.tls.port') %>"
    [entryPoints.traefik-api.auth]
      [entryPoints.traefik-api.auth.digest]
      users = [
<%
    username = p('traefik.api.digest_auth.username')
    realm = p('traefik.api.digest_auth.realm')
    digest = calc_digest(username, realm, p('traefik.api.digest_auth.password'))
-%>
        "<%= "#{username}:#{realm}:#{digest}" %>"
      ]
<%     if_p('traefik.api.tls.cert') do |cert| -%>
    [entryPoints.traefik-api.tls]
      minVersion = "<%= p('traefik.api.tls.min_version') %>"
      [[entryPoints.traefik-api.tls.certificates]]
      certFile = "/var/vcap/jobs/traefik/tls/api-entrypoint.crt"
      keyFile = "/var/vcap/jobs/traefik/tls/api-entrypoint.key"
<%     end -%>
<% end -%>



################################################################
# Traefik logs configuration
################################################################

# Log level
#
# Optional
# Default: "ERROR"
#
# Accepted values, in order of severity: "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "PANIC"
# Messages at and above the selected level will be logged.
#
logLevel = "<%= p('traefik.log_level') %>"

# Traefik logs
# Enabled by default and log to stdout
#
# Optional
#
[traefikLog]

# Sets the filepath for the traefik log. If not specified, stdout will be used.
# Intermediate directories are created if necessary.
#
# Optional
# Default: os.Stdout
#
<% if not p("bpm.enabled") -%>
filePath = "/var/vcap/sys/log/traefik/traefik.log"
<% end -%>

# Format is either "json" or "common".
#
# Optional
# Default: "common"
#
# format = "common"



<% if p('traefik.access_logs.enabled') -%>
################################################################
# Access logs configuration
################################################################

# Enable access logs
# By default it will write to stdout and produce logs in the textual
# Common Log Format (CLF), extended with additional fields.
#
# Optional
#
[accessLog]

# Sets the file path for the access log. If not specified, stdout will be used.
# Intermediate directories are created if necessary.
#
# Optional
# Default: os.Stdout
#
filePath = "/var/vcap/sys/log/traefik/access.log"

# Format is either "json" or "common".
#
# Optional
# Default: "common"
#
# format = "common"

  [accessLog.filters]

  # statusCodes: keep access logs with status codes in the specified range
  #
  # Optional
  # Default: []
  #
  # statusCodes = ["200", "300-302"]

  # retryAttempts: keep access logs when at least one retry happened
  #
  # Optional
  # Default: false
  #
  # retryAttempts = true

  # minDuration: keep access logs when request took longer than the specified duration
  #
  # Optional
  # Default: 0
  #
  # minDuration = "10ms"

  [accessLog.fields]

  # defaultMode
  #
  # Optional
  # Default: "keep"
  #
  # Accepted values "keep", "drop"
  #
  defaultMode = "keep"

  # Fields map which is used to override fields defaultMode
  [accessLog.fields.names]
    # "ClientUsername" = "drop"
    # ...

  [accessLog.fields.headers]
    # defaultMode
    #
    # Optional
    # Default: "keep"
    #
    # Accepted values "keep", "drop", "redact"
    #
    defaultMode = "keep"
    # Fields map which is used to override headers defaultMode
    [accessLog.fields.headers.names]
      # "User-Agent" = "redact"
      # "Authorization" = "drop"
      # "Content-Type" = "keep"
      # ...

<% end -%>




<% if p('traefik.api.enabled') -%>
################################################################
# API and dashboard configuration
################################################################

# API definition
# Warning: Enabling API will expose Traefik's configuration.
# It is not recommended in production,
# unless secured by authentication and authorizations
[api]

  # Name of the related entry point
  #
  # Optional
  # Default: "traefik"
  #
  entryPoint = "traefik-api"

  # Enable Dashboard
  #
  # Optional
  # Default: true
  #
  dashboard = true

  # Enable debug mode.
  # This will install HTTP handlers to expose Go expvars under /debug/vars and
  # pprof profiling data under /debug/pprof/.
  # Additionally, the log level will be set to DEBUG.
  #
  # Optional
  # Default: false
  #
  # debug = true

  # Enable more detailed statistics.
  [api.statistics]

    # Number of recent errors logged.
    #
    # Default: 10
    #
    recentErrors = 10



################################################################
# Ping configuration
################################################################

# Ping definition
[ping]

  # Name of the related entry point
  #
  # Optional
  # Default: "traefik"
  #
  entryPoint = "traefik-api"



################################################################
# Metrics configuration
################################################################

# Metrics definition
[metrics]

  # To enable Traefik to export internal metrics to Prometheus
  [metrics.prometheus]

    # Name of the related entry point
    #
    # Optional
    # Default: "traefik"
    #
    entryPoint = "traefik-api"

    # Buckets for latency metrics
    #
    # Optional
    # Default: [0.1, 0.3, 1.2, 5.0]
    #
    buckets = [0.1, 0.3, 1.2, 5.0]

  # DataDog metrics exporter type
  # [metrics.datadog]

    # DataDog's address.
    #
    # Required
    # Default: "localhost:8125"
    #
    # address = "localhost:8125"

    # DataDog push interval
    #
    # Optional
    # Default: "10s"
    #
    # pushInterval = "10s"

  # StatsD metrics exporter type
  # [metrics.statsd]

    # StatD's address.
    #
    # Required
    # Default: "localhost:8125"
    #
    # address = "localhost:8125"

    # StatD push interval
    #
    # Optional
    # Default: "10s"
    #
    # pushInterval = "10s"

  # InfluxDB metrics exporter type
  # [metrics.influxdb]

    # InfluxDB's address.
    #
    # Required
    # Default: "localhost:8089"
    #
    # address = "localhost:8089"

    # InfluxDB's address protocol (udp or http)
    #
    # Required
    # Default: "udp"
    #
    # protocol = "udp"

    # InfluxDB push interval
    #
    # Optional
    # Default: "10s"
    #
    # pushinterval = "10s"

    # InfluxDB database used when protocol is http
    #
    # Optional
    # Default: ""
    #
    # database = ""

    # InfluxDB retention policy used when protocol is http
    #
    # Optional
    # Default: ""
    #
    # retentionpolicy = ""
<% end -%>




<% if p("traefik.rest.enabled") -%>
################################################################
# Rest Provider
################################################################

# Enable REST Provider.
[rest]
  # Name of the related entry point
  #
  # Optional
  # Default: "traefik"
  #
  entryPoint = "traefik-api"
<% end -%>




<% if p('traefik.acme.enabled') -%>
################################################################
# Let's Encrypt configuration
################################################################
[acme]

# Email address used for registration.
#
# Required
#
email = "<%= p('traefik.acme.certs_email') %>"

# File or key used for certificates storage.
#
# Required
#
# storage = "acme.json"
# or `storage = "traefik/acme/account"` if using KV store.
<%   if p('traefik.acme.staging') -%>
storage = "/var/vcap/store/traefik/acme/acme-staging-data.json"
<%   else -%>
storage = "/var/vcap/store/traefik/acme/acme-data.json"
<%   end -%>

# Entrypoint to proxy acme apply certificates to.
# WARNING, must point to an entrypoint on port 443
#
# Required
#
entryPoint = "https"

# Deprecated, replaced by [acme.dnsChallenge].
#
# Optional.
#
# dnsProvider = "digitalocean"

# Deprecated, replaced by [acme.dnsChallenge.delayBeforeCheck].
#
# Optional
# Default: 0
#
# delayDontCheckDNS = 0

# If true, display debug log messages from the acme client library.
#
# Optional
# Default: false
#
acmeLogging = true

# If true, override certificates in key-value store when using storeconfig.
#
# Optional
# Default: false
#
# overrideCertificates = true

# Deprecated. Enable on demand certificate generation.
#
# Optional
# Default: false
#
onDemand = true

# Enable certificate generation on frontends host rules.
#
# Optional
# Default: false
#
# onHostRule = true

# CA server to use.
# Uncomment the line to use Let's Encrypt's staging server,
# leave commented to go to prod.
#
# Optional
# Default: "https://acme-v02.api.letsencrypt.org/directory"
#
<%   if p('traefik.acme.staging') -%>
caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"
<%   end -%>

# KeyType to use.
#
# Optional
# Default: "RSA4096"
#
# Available values : "EC256", "EC384", "RSA2048", "RSA4096", "RSA8192"
#
KeyType = "RSA4096"

# Use a TLS-ALPN-01 ACME challenge.
#
# Optional (but recommended)
#
# [acme.tlsChallenge]

# Use a HTTP-01 ACME challenge.
#
# Optional
#
[acme.httpChallenge]

  # EntryPoint to use for the HTTP-01 challenges.
  #
  # Required
  #
  entryPoint = "http"

# Use a DNS-01 ACME challenge rather than HTTP-01 challenge.
# Note: mandatory for wildcard certificate generation.
#
# Optional
#
# [acme.dnsChallenge]

  # DNS provider used.
  #
  # Required
  #
  # provider = "digitalocean"

  # By default, the provider will verify the TXT DNS challenge record before letting ACME verify.
  # If delayBeforeCheck is greater than zero, this check is delayed for the configured duration in seconds.
  # Useful if internal networks block external DNS queries.
  #
  # Optional
  # Default: 0
  #
  # delayBeforeCheck = 0

  # Use following DNS servers to resolve the FQDN authority.
  #
  # Optional
  # Default: empty
  #
  # resolvers = ["1.1.1.1:53", "8.8.8.8:53"]

  # Disable the DNS propagation checks before notifying ACME that the DNS challenge is ready.
  #
  # NOT RECOMMENDED:
  # Increase the risk of reaching Let's Encrypt's rate limits.
  #
  # Optional
  # Default: false
  #
  # disablePropagationCheck = true

# Domains list.
# Only domains defined here can generate wildcard certificates.
# The certificates for these domains are negotiated at traefik startup only.
#
# [[acme.domains]]
#   main = "local1.com"
#   sans = ["test1.local1.com", "test2.local1.com"]
# [[acme.domains]]
#   main = "local2.com"
# [[acme.domains]]
#   main = "*.local3.com"
#   sans = ["local3.com", "test1.test1.local3.com"]
<% end -%>



<% if p('traefik.web.enabled') -%>
################################################################
# Web backend configuration
################################################################

# Enable Web Provider.
[web]

# Web administration port.
#
# Required
# Default: ":8080"
#
address = ":<%= p('traefik.web.port') %>"

# SSL certificate and key used.
#
# Optional
#
<% if p('traefik.web.tls.enabled') -%>
certFile = "/var/vcap/jobs/traefik/tls/web-backend.crt"
keyFile = "/var/vcap/jobs/traefik/tls/web-backend.key"
<% end -%>

# Set REST API to read-only mode.
#
# Optional
# Default: false
#
readOnly = <%= p('traefik.web.readonly') %>

# Set the root path for webui and API
#
# Deprecated
# Optional
#
# path = "/mypath"
#

# To enable basic auth on the webui
[web.auth.basic]
users = [ "<%= p('traefik.web.basic_auth.username') %>:<%= encode_sha1(p('traefik.web.basic_auth.password')) %>" ]

# To enable digest auth on the webui with 2 user/realm/pass: test:traefik:test and test2:traefik:test2
# [web.auth.digest]
# users = ["test:traefik:a2688e031edb4be6a3797f3882655c05", "test2:traefik:518845800f9e2bfb1f1f740ec24f074e"]
# usersFile = "/path/to/.htdigest"

# To enable Traefik to export internal metrics to Prometheus
# [web.metrics.prometheus]

# Buckets for latency metrics
#
# Optional
# Default: [0.1, 0.3, 1.2, 5]
# buckets=[0.1,0.3,1.2,5.0]

# DataDog metrics exporter type
# [web.metrics.datadog]

# DataDog's address.
#
# Required
# Default: "localhost:8125"
#
# address = "localhost:8125"

# DataDog push interval
#
# Optional
# Default: "10s"
#
# pushinterval = "10s"

# StatsD metrics exporter type
# [web.metrics.statsd]

# StatD's address.
#
# Required
# Default: "localhost:8125"
#
# address = "localhost:8125"

# StatD push interval
#
# Optional
# Default: "10s"
#
# pushinterval = "10s"

# InfluxDB metrics exporter type
# [web.metrics.influxdb]

# InfluxDB's address.
#
# Required
# Default: "localhost:8089"
#
# address = "localhost:8089"

# InfluxDB's address protocol (udp or http)
#
# Required
# Default: "udp"
#
# protocol = "udp"

# InfluxDB push interval
#
# Optional
# Default: "10s"
#
# pushinterval = "10s"

# InfluxDB database used when protocol is http
#
# Optional
# Default: ""
#
# database = ""

# InfluxDB retention policy used when protocol is http
#
# Optional
# Default: ""
#
# retentionpolicy = ""

# Enable more detailed statistics.
# [web.statistics]

# Number of recent errors logged.
#
# Default: 10
#
# recentErrors = 10

<% end -%>



<% if p('traefik.file.enabled') -%>
################################################################
# File backend configuration
################################################################

[file]

# Rules file
# If defined, traefik will load rules from this file,
# otherwise, it will load rules from current file (cf Sample rules below).
#
# Optional
#
# filename = "rules.toml"
filename = "/var/vcap/jobs/traefik/conf/rules.toml"

# Enable watch file changes
#
# Optional
#
watch = <%= p('traefik.file.watch') %>
<% end -%>
<% if p('traefik.etcd.enabled') -%>
################################################################
# File backend configuration
################################################################
[etcd]

# Etcd server endpoint.
#
# Required
# Default: "127.0.0.1:2379"
#
endpoint = "<%= p("traefik.etcd.endpoint") %>"

# Enable watch Etcd changes.
#
# Optional
# Default: true
#
watch = <%= p("traefik.etcd.watch") %>

# Prefix used for KV store.
#
# Optional
# Default: "/traefik"
#
prefix = "<%= p("traefik.etcd.prefix") %>"

# Override default configuration template.
# For advanced users :)
#
# Optional
#
# filename = "etcd.tmpl"

# Use etcd user/pass authentication.
#
# Optional
<% if !p("traefik.etcd.credentials").compact.empty? -%>
username = "<%= p("traefik.etcd.credentials.username") %>"
password = "<%= p("traefik.etcd.credentials.password") %>"
<% end -%>

<% if p("traefik.etcd.api_v3") %>
useAPIV3 = true
<% end %>

# Enable etcd TLS connection.
#
# Optional
#
<% if !p("traefik.etcd.tls").compact.empty? -%>
  [etcd.tls]
    <% if_p("traefik.etcd.tls.ca") do |ca| %>
    ca = "<%= ca.gsub(/\n/, "\\n") %>"
    <% end %>
    <% if_p("traefik.etcd.tls.key") do |key| %>
    key = "<%= key.gsub(/\n/, "\\n") %>"
    <% end %>
    <% if_p("traefik.etcd.tls.cert") do |cert| %>
    cert = "<%= cert.gsub(/\n/, "\\n")  %>"
    <% end %>
    insecureSkipVerify = <%= p("traefik.etcd.tls.insecureSkipVerify","true") %>
<% end -%>
<% end -%> 
