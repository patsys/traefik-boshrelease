#!/usr/bin/env bash
<%
    require "shellwords"
    def esc(x)
        Shellwords.shellescape(x)
    end

    traefik = link("traefik")
    if not traefik.p('traefik.api.enabled') or not traefik.p('traefik.rest.enabled')
        # Smoke tests do require the API and the REST backend to be activated
        if not traefik.p('traefik.api.enabled')
-%>
echo "FATAL: smoke tests require the API to be enabled." \
    "Please set the 'traefik.api.enabled' property of the 'teraefik' job to 'true'."
<%
        end
        if not traefik.p('traefik.rest.enabled')
-%>
echo "FATAL: smoke tests require the REST provider to be enabled." \
    "Please set the 'traefik.rest.enabled' property of the 'teraefik' job to 'true'."
<%
        end
-%>
exit 1
<%
    else # if p('traefik.api.enabled') and traefik.p('traefik.rest.enabled')

        adm_username = traefik.p("traefik.api.digest_auth.username")
        adm_password = traefik.p("traefik.api.digest_auth.password")

        if traefik.p("traefik.tls.enabled")
            pxy_scheme = "https"
            pxy_port = traefik.p("traefik.tls.port")
        else
            pxy_scheme = "http"
            pxy_port = traefik.p("traefik.http.port")
        end

        api_tls_port = traefik.p("traefik.api.tls.port")

        main_address = traefik.instances.first.address
        frontend_hostname = p("frontend_hostname")
-%>

set -eo pipefail

function prepend_datetime() {
    awk -W interactive '{ system("echo -n [$(date +%FT%T%z)]"); print " " $0 }'
}

exec \
    3>&1 \
    1> >(prepend_datetime >&3) \
    2>&1

readonly API_BASE_URI=<%= esc("https://#{main_address}:#{api_tls_port}") %>
readonly PXY_BASE_URI=<%= esc("#{pxy_scheme}://#{frontend_hostname}:#{pxy_port}") %>

# setup cleanup framework
defer_stack=()
function defer() {
    local function_name=$1

    local new_stack=("${function_name}")
    new_stack+=("${defer_stack[@]}")

    defer_stack=("${new_stack[@]}")
}
function run_deferred() {
    for fn in "${defer_stack[@]}"; do
        "${fn}"
    done
}

trap run_deferred EXIT

# setup .netrc for curl to fetch the login name and password
export HOME=/var/vcap/data/smoke-tests/fake-home
mkdir -p "${HOME}"
touch "${HOME}/.netrc"
chmod 600 "${HOME}/.netrc" # restrict access before writing content
echo <%= esc("machine #{main_address} login #{adm_username} password #{adm_password}") %> \
    > "${HOME}/.netrc"

function cleanup_netrc() {
    rm -f "${HOME}/.netrc"
}
defer cleanup_netrc

function request() {
    local base=$1 ca_name=$2 verb=$3 uri_path=$4; shift 4

    (
        set -x
        curl --silent --fail --show-error --location \
            --cacert "/var/vcap/jobs/smoke-tests/tls/${ca_name}.crt" \
            --request "${verb}" \
            --url "${base}${uri_path}" \
            "$@" \
            --include
    )
}

function api() {
    request "${API_BASE_URI}" "api-entrypoint-ca" "$@" \
        --header "Content-Type: application/json" \
        --netrc --digest
}

function proxy_https() {
    local main_address=<%= esc("#{main_address}") %>
    if [[ ! "${main_address}" =~ "^[0-9.]+$" ]]; then
        main_address=$(host "${main_address}" | head -n1 | cut -d" " -f4)
    fi
    request "${PXY_BASE_URI}" "traefik-default-ca" "$@" \
        --resolve <%= esc("#{frontend_hostname}:#{pxy_port}") %>":${main_address}" \
        --insecure
}

function proxy_http() {
    local main_address=<%= esc("#{main_address}") %>
    if [[ ! "${main_address}" =~ "^[0-9.]+$" ]]; then
        main_address=$(host "${main_address}" | head -n1 | cut -d" " -f4)
    fi
    request <%= esc("http://#{frontend_hostname}:80") %> "traefik-default-ca" "$@" \
        --resolve <%= esc("#{frontend_hostname}") %>":80:${main_address}" \
        --resolve <%= esc("#{frontend_hostname}:#{pxy_port}") %>":${main_address}" \
        --insecure
}

function cleanup_rest_provider_config() {
    api PUT "/api/providers/rest" \
            --data-raw '{}' \
        | tr -d '\r' \
        | sed -e 's/^Www-Authenticate:.*$/Www-Authenticate: <redacted>/i;
                s/^Authorization:.*$/Authorization: <redacted>/i'
    echo $'\n'
}

api GET "/dashboard/" \
    | tr -d '\r' \
    | sed -e 's/^Www-Authenticate:.*$/Www-Authenticate: <redacted>/i;
            s/^Authorization:.*$/Authorization: <redacted>/i'
echo $'\n'

defer "cleanup_rest_provider_config"
api PUT "/api/providers/rest" \
        --data-raw '{
            "frontends": {
                "mockbin-http-frontend": {
                    "entryPoints": [ "http" ],
                    "priority": 20,
                    "backend": "mockbin-http-backend",
                    "passHostHeader": false,
                    "routes": {
                        "http-route": {
                            "rule": "Host: '<%= esc("#{frontend_hostname}") %>'"
                        }
                    }
                },
                "mockbin-https-frontend": {
                    "entryPoints": [ "https" ],
                    "priority": 20,
                    "backend": "mockbin-https-backend",
                    "passHostHeader": false,
                    "routes": {
                        "https-route": {
                            "rule": "Host: '<%= esc("#{frontend_hostname}") %>'"
                        }
                    }
                }
            },
            "backends": {
                "mockbin-http-backend": {
                    "servers": {
                        "http-server": {
                            "url": "http://mockbin.org:80",
                            "weight": 0
                        }
                    },
                    "loadBalancer": {
                        "method": "wrr"
                    }
                },
                "mockbin-https-backend": {
                    "servers": {
                        "https-server": {
                            "url": "https://mockbin.org:443",
                            "weight": 0
                        }
                    },
                    "loadBalancer": {
                        "method": "wrr"
                    }
                }
            }
        }' \
    | tr -d '\r' \
    | sed -e 's/^Www-Authenticate:.*$/Www-Authenticate: <redacted>/i;
            s/^Authorization:.*$/Authorization: <redacted>/i'
echo $'\n'

sleep 3 # wait for the new configuration to take effect

# send an HTTP request through the configured frontend/backend
proxy_http GET "/request?toto=titi&tata=tutu" \
        --header "Content-Type: application/json" \
        --data-raw '{"plip": "plop"}'
echo $'\n'

# send an HTTPS request through the configured frontend/backend
proxy_https GET "/request?toto=titi&tata=tutu" \
        --header "Content-Type: application/json" \
        --data-raw '{"plip": "plop"}'
echo $'\n'

exit 0
<%
    end # if p('traefik.api.enabled') and traefik.p('traefik.rest.enabled')
-%>
